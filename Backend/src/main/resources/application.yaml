spring:
  application:
    name: SocialNetwork
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USER}
    password: ${DB_PASS}
  main:
    allow-bean-definition-overriding: true
  jpa:
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
    #    show-sql: true
    open-in-view: false
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GM_USERNAME}
    password: ${GM_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: social-network
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
  data:
    redis:
      host: ${RD_HOST}
      port: ${RD_PORT}
    elasticsearch:
      host: ${ES_HOST}
      port: ${ES_PORT}
  servlet:
    multipart:
      enabled: true
      max-file-size: 2MB
      max-request-size: 2MB
  elasticsearch:
    uris: http://${ES_HOST}:${ES_PORT}
    connection-timeout: 5s
    socket-timeout: 3s
token:
  secret-key: ${JWT_SECRET}
  access-expiration: 7200000 # 7200000 # 1000 * 60 * 60 * 2 = 2 hours
  refresh-expiration: 604800000 # 1000 * 60 * 60 * 24 * 7 = 7 days
  verified-expiration: 900000 # 1000 * 60 * 15 = 15 minutes
cors:
  headers:
    access-control-allow-origin: "*"
    access-control-allow-methods: "*"
    access-control-max-age: "3600"
    access-control-allow-headers: "content-type, authorization, xsrf-token"
    access-control-allow-credentials: "true"
    access-control-expose-headers: "xsrf-token"
cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    s3:
      aws-region: ${AWS_REGION}
      bucket-name: ${AWS_BUCKET_NAME}
link:
  front-end-domain: ${FRONT_END_DOMAIN}
  forgot-password-verify: /forgot_password/verify?token=
  confirm-email-verify: /register/verify?token=
detect-comment:
  api:
    url: ${DETECT_COMMENT_HOST}
    key: ${X_API_KEY}
logging:
  level:
    com.example.socialnetwork.infrastructure.rest_client: DEBUG
